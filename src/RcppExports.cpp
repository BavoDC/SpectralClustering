// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// XtV
Eigen::VectorXd XtV(Eigen::SparseMatrix<double> X, const Eigen::Map<Eigen::VectorXd> V);
RcppExport SEXP _SpectralClustering_XtV(SEXP XSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(XtV(X, V));
    return rcpp_result_gen;
END_RCPP
}
// XB
Eigen::VectorXd XB(Eigen::SparseMatrix<double> X, const Eigen::Map<Eigen::VectorXd> B);
RcppExport SEXP _SpectralClustering_XB(SEXP XSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(XB(X, B));
    return rcpp_result_gen;
END_RCPP
}
// XXt
Eigen::SparseMatrix<double> XXt(Eigen::SparseMatrix<double> X, Eigen::SparseMatrix<double> Xt);
RcppExport SEXP _SpectralClustering_XXt(SEXP XSEXP, SEXP XtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type Xt(XtSEXP);
    rcpp_result_gen = Rcpp::wrap(XXt(X, Xt));
    return rcpp_result_gen;
END_RCPP
}
// GSM
Eigen::MatrixXd GSM(const Eigen::Map<Eigen::MatrixXd>& A, const double sigma);
RcppExport SEXP _SpectralClustering_GSM(SEXP ASEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(GSM(A, sigma));
    return rcpp_result_gen;
END_RCPP
}
// GSMLocalScaling
Eigen::MatrixXd GSMLocalScaling(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& sigma);
RcppExport SEXP _SpectralClustering_GSMLocalScaling(SEXP ASEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(GSMLocalScaling(A, sigma));
    return rcpp_result_gen;
END_RCPP
}
// Norm
double Norm(const Eigen::Map<Eigen::VectorXd>& v);
RcppExport SEXP _SpectralClustering_Norm(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(Norm(v));
    return rcpp_result_gen;
END_RCPP
}
// redir
void redir(const std::string file);
RcppExport SEXP _SpectralClustering_redir(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    redir(file);
    return R_NilValue;
END_RCPP
}
// resetredir
void resetredir();
RcppExport SEXP _SpectralClustering_resetredir() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    resetredir();
    return R_NilValue;
END_RCPP
}
// CosineSimilarity
Eigen::MatrixXd CosineSimilarity(const Eigen::Map<Eigen::MatrixXd>& X);
RcppExport SEXP _SpectralClustering_CosineSimilarity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(CosineSimilarity(X));
    return rcpp_result_gen;
END_RCPP
}
// Qm
Eigen::MatrixXd Qm(const Eigen::Map<Eigen::MatrixXd>& A);
RcppExport SEXP _SpectralClustering_Qm(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Qm(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpectralClustering_XtV", (DL_FUNC) &_SpectralClustering_XtV, 2},
    {"_SpectralClustering_XB", (DL_FUNC) &_SpectralClustering_XB, 2},
    {"_SpectralClustering_XXt", (DL_FUNC) &_SpectralClustering_XXt, 2},
    {"_SpectralClustering_GSM", (DL_FUNC) &_SpectralClustering_GSM, 2},
    {"_SpectralClustering_GSMLocalScaling", (DL_FUNC) &_SpectralClustering_GSMLocalScaling, 2},
    {"_SpectralClustering_Norm", (DL_FUNC) &_SpectralClustering_Norm, 1},
    {"_SpectralClustering_redir", (DL_FUNC) &_SpectralClustering_redir, 1},
    {"_SpectralClustering_resetredir", (DL_FUNC) &_SpectralClustering_resetredir, 0},
    {"_SpectralClustering_CosineSimilarity", (DL_FUNC) &_SpectralClustering_CosineSimilarity, 1},
    {"_SpectralClustering_Qm", (DL_FUNC) &_SpectralClustering_Qm, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpectralClustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
